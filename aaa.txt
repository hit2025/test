https://test-d6nq.onrender.com (Update-1)
https://test-1-o97w.onrender.com (Update-2)
https://test-3-igrg.onrender.com/ (Update-3)
**** https://test-3-igrg.onrender.com/driver_dashboard?id=1 (And 2,3)
https://test-4-s9fj.onrender.com/ (Update-4)
**** https://test-4-s9fj.onrender.com/driver_dashboard?id=1 (And 2,3)



🚮 Smart Campus Waste Management — Workflow Summary
1️⃣ Data Layer

The system has IoT-enabled smart bins that send data about their fill levels (simulated here).

Each bin has attributes like:
id, lat, lng, fill %, status (OK / FULL).

A set of autonomous vehicles (waste collectors) are initialized as IDLE.

2️⃣ Trigger & Detection

When a bin’s fill level reaches 100%, it automatically generates an alert (/fill_random or auto simulation).

The backend immediately adds an entry to the alerts list with a timestamp.

3️⃣ Assignment Logic

When a bin is FULL, the system calculates Haversine distances from all available (IDLE) vehicles.

The nearest vehicle is assigned to that bin (/assign_nearest_full).

The assignment is logged in:

assignments — who was assigned when.

comparison_stats — includes other vehicles and their distances for analytical comparison.

4️⃣ Vehicle Animation & Route

On the map, the assigned vehicle’s route is drawn using Leaflet Routing Machine.

The vehicle moves dynamically along the calculated route using an animation (MovingMarker).

Voice narration (speech synthesis) announces:

The task assignment (with distance & ETA).

The completion message after arrival.

5️⃣ Trip Completion

Once the vehicle finishes its path:

It calls /complete_trip/{vid}/{bid}.

The bin’s fill resets to 0% and status returns to OK.

The vehicle returns to IDLE status.

System statistics are updated (completed tasks, total distance, average ETA).

6️⃣ Dashboard Visualization

Simulation Tab:

Real-time map (bins, vehicles, alerts).

Vehicle movement & route visualization.

Speech synthesis for task updates.

System stats panel showing live KPIs.

Dashboard Tab:

Separate gauges for Air Quality and Water Quality (simulated sensors).

Waste Management panels showing:

Active bin levels.

Vehicle statuses.

Assignments & comparison stats.

System performance summary.

7️⃣ Automation & Continuous Loop

The Auto Mode (/start_auto) runs a background simulation thread:

Random bins fill gradually.

Automatic alerts & assignments keep the cycle running continuously.

⚙️ Tech Stack Overview

Backend: FastAPI (Python)

Frontend: HTML, CSS, JavaScript (Leaflet + Chart.js)

Database (simulated): In-memory Python lists

Visualization: Leaflet map + voice feedback

AI Layer (future-ready): Predictive cleaning & anomaly detection

🏆 Pitch Line

“A real-time IoT-enabled campus waste management system that detects, dispatches, and monitors bin cleaning autonomously — with intelligent route assignment, voice-assisted alerts, and live dashboard analytics.”

Haversine Distance (short explanation)

The Haversine formula calculates the shortest distance between two points on the Earth’s surface —
using their latitude and longitude, assuming the Earth is a sphere.

🧮 In simple terms

It tells you “as-the-crow-flies” distance between two GPS coordinates —
not road distance, but straight-line distance over the curvature of the Earth.


🔹 Example:

If Bin A = (22.0509, 88.0725)
and Vehicle = (22.0492, 88.0705),
Haversine distance ≈ 270 meters (straight-line distance).

Real-Life Implementation Plan (Phase-wise)
🧩 Phase 1 — Hardware Setup (IoT Layer)

Each smart bin will have:

Ultrasonic sensor → measures waste level (height of waste).

Gas sensor (MQ-135) → detects smell/toxic gases.

TDS/EC sensors → used at water points for purity check.

GPS module → tracks bin location.

LoRa/NB-IoT/Wi-Fi module (ESP32 or NodeMCU) → sends data to cloud.

Sensors send data (bin fill % + location + gases) to the backend (cloud dashboard) via MQTT or HTTP.

🌐 Phase 2 — Cloud and Backend

Deploy your FastAPI backend on a cloud platform (Render / AWS / Azure / Raspberry Pi server).

Connect IoT devices using Firebase, MQTT Broker (like Mosquitto), or LoRa Gateway.

Backend receives real-time bin data and stores it in a MongoDB or Firebase database.

The assignment algorithm (same haversine logic) runs on this backend.

🚚 Phase 3 — Vehicle Integration

Each garbage vehicle (electric cart / smart car) will have:

GPS tracker (SIM800L or Neo-6M) → sends location to backend.

Smart tablet / mobile app running your dashboard UI (React or Flutter).

When a bin is FULL, backend assigns nearest vehicle automatically.

The app navigates using Google Maps API or your Leaflet route.

🧠 Phase 4 — AI Optimization (future-ready)

Use collected data to train an AI model for:

Predictive Cleaning Schedule (forecast when bins will get full).

Anomaly Detection (detect sensor faults or overfill).

Route Optimization (shortest multi-bin route for vehicles).

📊 Phase 5 — Dashboard Deployment

Host your existing dashboard (HTML + JS + FastAPI) on Render or Raspberry Pi server.

Add live gauges for:

Bin fill %

Gas / Pollution data

Vehicle movement (via GPS updates)

Connect with Blynk IoT or ThingSpeak for live mobile monitoring.

⚡ Phase 6 — Campus Integration

Install 10–15 smart bins across the campus.

Use LoRaWAN gateway (1 device covers 2–3 km range).

Admins monitor the live map dashboard; vehicles move in real time.

System sends voice or SMS alerts for overfilled bins.

🎯 Pitch Summary for Jury

“We can integrate IoT sensors in real bins, connect them to our FastAPI cloud backend via LoRaWAN or Wi-Fi, and use our existing dashboard as the live control center for waste and water quality management. Vehicles with GPS modules will auto-navigate to the nearest full bin. The same system can scale to a smart city model.”
